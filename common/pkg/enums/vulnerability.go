package enums

import (
	"strings"
)

// AccessType represents the access vector for a vulnerability
type AccessType string

const (
	AccessTypeNetwork         AccessType = "Network"
	AccessTypeAdjacentNetwork AccessType = "Adjacent Network"
	AccessTypeLocal           AccessType = "Local"
	AccesTypePhysical         AccessType = "Physical"
	AccessTypeUnknown         AccessType = "Unknown"
)

func (a AccessType) String() string {
	return string(a)
}

// ComplexityType represents the attack complexity of a vulnerability
type ComplexityType string

const (
	ComplexityTypeLow     ComplexityType = "Low"
	ComplexityTypeMedium  ComplexityType = "Medium"
	ComplexityTypeHigh    ComplexityType = "High"
	ComplexityTypeUnknown ComplexityType = "Unknown"
)

func (c ComplexityType) String() string {
	return string(c)
}

// PrivilegesRequiredType represents the privileges required to explouit a vulnerability
type PrivilegesRequiredType string

const (
	PrivilegesRequiredNone    PrivilegesRequiredType = "None"
	PrivilegesRequiredLow     PrivilegesRequiredType = "Low"
	PrivilegesRequiredHigh    PrivilegesRequiredType = "High"
	PrivilegesRequiredUnknown PrivilegesRequiredType = "Unknown"
)

func (p PrivilegesRequiredType) String() string {
	return string(p)
}

// SeverityType represents the base severity of a vulnerability.
type SeverityType string

const (
	SeverityTypeCritical SeverityType = "Critical"
	SeverityTypeHigh     SeverityType = "High"
	SeverityTypeMedium   SeverityType = "Medium"
	SeverityTypeLow      SeverityType = "Low"
	SeverityTypeNone     SeverityType = "None"
	SeverityTypeUnknown  SeverityType = "Unknown"
)

func (s SeverityType) String() string {
	return string(s)
}

func (s SeverityType) Int() int {
	switch s {
	case SeverityTypeNone:
		return 0
	case SeverityTypeLow:
		return 1
	case SeverityTypeMedium:
		return 2
	case SeverityTypeHigh:
		return 3
	case SeverityTypeCritical:
		return 4
	default:
		return 0
	}
}

func StringToSeverityType(s string) SeverityType {
	switch strings.ToLower(s) {
	case "critical":
		return SeverityTypeCritical
	case "high":
		return SeverityTypeHigh
	case "medium":
		return SeverityTypeMedium
	case "low":
		return SeverityTypeLow
	case "none":
		return SeverityTypeNone
	default:
		return SeverityTypeUnknown
	}
}

// ImpactType represents the impact on confidentiality, integrity, or availability.
type ImpactType string

const (
	ImpactTypeHigh    ImpactType = "High"
	ImpactTypeLow     ImpactType = "Low"
	ImpactTypeNone    ImpactType = "None"
	ImpactTypeUnknown ImpactType = "Unknown"
)

func (i ImpactType) String() string {
	return string(i)
}

// ExploitabilityType represents how exploitable the vulnerability is.
type ExploitabilityType string

const (
	ExploitabilityTypeUnproven       ExploitabilityType = "Unproven"
	ExploitabilityTypeProofOfConcept ExploitabilityType = "Proof of Concept"
	ExploitabilityTypeFunctional     ExploitabilityType = "Functional"
	ExploitabilityTypeHigh           ExploitabilityType = "High"
	ExploitabilityTypeUndefined      ExploitabilityType = "Not Defined"
	ExploitabilityTypeUnknown        ExploitabilityType = "Unknown"
)

func (e ExploitabilityType) String() string {
	return string(e)
}

// LikelyhoodType refers to the probability that a vulnerability will be exploited.
type LikelyhoodType string

const (
	LikelyhoodTypeVeryHigh LikelyhoodType = "Very High"
	LikelyhoodTypeHigh     LikelyhoodType = "High"
	LikelyhoodTypeMedium   LikelyhoodType = "Medium"
	LikelyhoodTypeLow      LikelyhoodType = "Low"
	LikelyhoodTypeUnknown  LikelyhoodType = "Unknown"
)

func (l LikelyhoodType) String() string {
	return string(l)
}
